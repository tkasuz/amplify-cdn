import {CfnOutput, CfnParameter, Fn, Stack, StackProps} from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as cloudfront from 'aws-cdk-lib/aws-cloudfront';
import * as cloudfrontOrigins from 'aws-cdk-lib/aws-cloudfront-origins';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as acm from 'aws-cdk-lib/aws-certificatemanager';

interface DistributionStackProps extends StackProps {
  readonly distributionName: string;
  readonly originBucketName: string;
  readonly certificateArn?: string | undefined;
  readonly customDomainName?: string | undefined;
}

export class DistributionStack extends Stack {
  protected readonly distributionName: string;
  protected readonly originBucketName: string;
  protected parameters: Map<string, CfnParameter>;

  constructInputParamters(parameterNames: Array<string>): Map<string, CfnParameter> {
    let parametersMap: Map<string, CfnParameter> = new Map();
    parameterNames.forEach(parameterName => {
      const inputParameter = new CfnParameter(this, parameterName, { type: 'String' });
      parametersMap.set(parameterName, inputParameter);
    });
    return parametersMap;
  }

  constructor(scope: Construct, id: string, props: DistributionStackProps) {
    super(scope, id, props);

    this.distributionName = props.distributionName;
    this.originBucketName = props.originBucketName;

    let certificate: acm.Certificate | undefined;
    if (props.certificateArn && props.customDomainName) {
      certificate = acm.Certificate.fromCertificateArn(this, 'Certificate', props.certificateArn) as acm.Certificate;
    }

    const inputParameters: string[] = ['env'];

    this.parameters = this.constructInputParamters(inputParameters); 

    this.distributionName = Fn.join('-', [this.distributionName, this.parameters.get('env') ? this.parameters.get('env')!.valueAsString : '']);;

    const bucket = s3.Bucket.fromBucketName(this, 'Bucket', this.originBucketName);

    const oac= new cloudfront.CfnOriginAccessControl(this, 'OriginAccessControl', {
      originAccessControlConfig: {
        name: 'OriginAccessControlForBucket',
        originAccessControlOriginType: 's3',
        signingBehavior: 'always',
        signingProtocol: 'sigv4',
        description: 'Origin Access Control automatically generated by AWS Amplify',
      }
    });

    const distribution = new cloudfront.Distribution(this, 'MyDistribution', {
      comment: 'amplify-cdn-distribution',
      defaultBehavior: {
        allowedMethods: cloudfront.AllowedMethods.ALLOW_GET_HEAD,
        cachedMethods: cloudfront.CachedMethods.CACHE_GET_HEAD,
        cachePolicy: cloudfront.CachePolicy.CACHING_OPTIMIZED,
        viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
        origin: new cloudfrontOrigins.S3Origin(bucket),
        compress: true,
      },
      domainNames: props.customDomainName ? [props.customDomainName] : undefined,
      certificate: certificate ? certificate : undefined,
      httpVersion: cloudfront.HttpVersion.HTTP2_AND_3,
    });

    const cfnDistribution = distribution.node.defaultChild as cloudfront.CfnDistribution;

    cfnDistribution.addPropertyOverride('DistributionConfig.Origins.0.S3OriginConfig.OriginAccessIdentity', '');
    cfnDistribution.addPropertyOverride('DistributionConfig.Origins.0.OriginAccessControlId', oac.attrId);

    bucket.addToResourcePolicy(
      new iam.PolicyStatement({
        actions: ['s3:GetObject'],
        effect: iam.Effect.ALLOW,
        principals: [
          new iam.ServicePrincipal('cloudfront.amazonaws.com'),
        ],
        resources: [`${bucket.bucketArn}/*`],
        conditions: {
          'StringEquals': {
            'AWS:SourceArn': `arn:aws:cloudfront::${Stack.of(this).account}:distribution/${distribution.distributionId}`
          }
        }
      }),
    );
    new CfnOutput(this, 'DomainName', {
      value: distribution.distributionDomainName,
    })
  }
}